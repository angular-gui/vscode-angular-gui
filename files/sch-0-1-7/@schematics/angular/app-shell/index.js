"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const core_1 = require("@angular-devkit/core");
const schematics_1 = require("@angular-devkit/schematics");
require("rxjs/add/operator/merge");
const ts = require("typescript");
const ast_utils_1 = require("../utility/ast-utils");
const config_1 = require("../utility/config");
const ng_ast_utils_1 = require("../utility/ng-ast-utils");
const route_utils_1 = require("../utility/route-utils");
// Helper functions. (possible refactors to utils)
function getSourceFile(host, path) {
    const buffer = host.read(path);
    if (!buffer) {
        throw new schematics_1.SchematicsException(`Could not find bootstrapped module.`);
    }
    const content = buffer.toString();
    const source = ts.createSourceFile(path, content, ts.ScriptTarget.Latest, true);
    return source;
}
function getServerModulePath(host, app) {
    const mainPath = `/${app.root}/${app.main}`;
    const mainSource = getSourceFile(host, mainPath);
    const allNodes = ast_utils_1.getSourceNodes(mainSource);
    const expNode = allNodes.filter(node => node.kind === ts.SyntaxKind.ExportDeclaration)[0];
    if (!expNode) {
        return null;
    }
    const relativePath = expNode.moduleSpecifier;
    const modulePath = core_1.normalize(`/${app.root}/${relativePath.text}.ts`);
    return modulePath;
}
// end helper functions.
function addUniversalApp(options) {
    return (host, context) => {
        // Copy options.
        const universalOptions = Object.assign({}, options, { name: options.universalApp });
        // Delete non-universal options.
        delete universalOptions.universalApp;
        delete universalOptions.route;
        return schematics_1.schematic('universal', universalOptions)(host, context);
    };
}
function addAppShellConfig(options) {
    return (host) => {
        const config = config_1.getConfig(host);
        const app = config_1.getAppFromConfig(config, options.clientApp || '0');
        if (!app) {
            throw new schematics_1.SchematicsException(`Client app (${options.clientApp}) could not be found.`);
        }
        if (!options.route) {
            throw new schematics_1.SchematicsException(`Route is not defined`);
        }
        app.appShell = {
            app: options.universalApp,
            route: options.route,
        };
        host.overwrite('/.angular-cli.json', JSON.stringify(config, null, 2));
        return host;
    };
}
function addRouterModule(options) {
    return (host) => {
        const config = config_1.getConfig(host);
        const app = config_1.getAppFromConfig(config, options.clientApp || '0');
        if (app === null) {
            throw new schematics_1.SchematicsException('Client app not found.');
        }
        const modulePath = ng_ast_utils_1.getAppModulePath(host, app);
        const moduleSource = getSourceFile(host, modulePath);
        const changes = ast_utils_1.addImportToModule(moduleSource, modulePath, 'RouterModule', '@angular/router');
        const recorder = host.beginUpdate(modulePath);
        changes.forEach((change) => {
            recorder.insertLeft(change.pos, change.toAdd);
        });
        host.commitUpdate(recorder);
        return host;
    };
}
function getMetadataProperty(metadata, propertyName) {
    const properties = metadata.properties;
    const property = properties
        .filter(prop => prop.kind === ts.SyntaxKind.PropertyAssignment)
        .filter((prop) => {
        const name = prop.name;
        switch (name.kind) {
            case ts.SyntaxKind.Identifier:
                return name.getText() === propertyName;
            case ts.SyntaxKind.StringLiteral:
                return name.text === propertyName;
        }
        return false;
    })[0];
    return property;
}
function addRouterOutlet(options) {
    return (host) => {
        const routerOutletMarkup = `<router-outlet></router-outlet>`;
        const config = config_1.getConfig(host);
        const app = config_1.getAppFromConfig(config, options.clientApp || '0');
        if (app === null) {
            throw new schematics_1.SchematicsException('Client app not found.');
        }
        const modulePath = ng_ast_utils_1.getAppModulePath(host, app);
        // const modulePath = getAppModulePath(host, options);
        const moduleSource = getSourceFile(host, modulePath);
        const metadataNode = ast_utils_1.getDecoratorMetadata(moduleSource, 'NgModule', '@angular/core')[0];
        const bootstrapProperty = getMetadataProperty(metadataNode, 'bootstrap');
        const arrLiteral = bootstrapProperty
            .initializer;
        const componentSymbol = arrLiteral.elements[0].getText();
        const relativePath = ast_utils_1.getSourceNodes(moduleSource)
            .filter(node => node.kind === ts.SyntaxKind.ImportDeclaration)
            .filter(imp => {
            return ast_utils_1.findNode(imp, ts.SyntaxKind.Identifier, componentSymbol);
        })
            .map((imp) => {
            const pathStringLiteral = imp.moduleSpecifier;
            return pathStringLiteral.text;
        })[0];
        const dirEntry = host.getDir(modulePath);
        const dir = dirEntry.parent ? dirEntry.parent.path : '/';
        const compPath = core_1.normalize(`/${dir}/${relativePath}.ts`);
        const compSource = getSourceFile(host, compPath);
        const compMetadata = ast_utils_1.getDecoratorMetadata(compSource, 'Component', '@angular/core')[0];
        const templateProp = getMetadataProperty(compMetadata, 'template');
        const templateUrlProp = getMetadataProperty(compMetadata, 'templateUrl');
        if (templateProp) {
            if (!/<router\-outlet>/.test(templateProp.initializer.getText())) {
                const recorder = host.beginUpdate(compPath);
                recorder.insertRight(templateProp.initializer.getEnd() - 1, routerOutletMarkup);
                host.commitUpdate(recorder);
            }
        }
        else {
            const templateUrl = templateUrlProp.initializer.text;
            const dirEntry = host.getDir(compPath);
            const dir = dirEntry.parent ? dirEntry.parent.path : '/';
            const templatePath = core_1.normalize(`/${dir}/${templateUrl}`);
            const buffer = host.read(templatePath);
            if (buffer) {
                const content = buffer.toString();
                if (!/<router\-outlet>/.test(content)) {
                    const recorder = host.beginUpdate(templatePath);
                    recorder.insertRight(buffer.length, routerOutletMarkup);
                    host.commitUpdate(recorder);
                }
            }
        }
        return host;
    };
}
function addServerRoutes(options) {
    return (host) => {
        const config = config_1.getConfig(host);
        const app = config_1.getAppFromConfig(config, options.universalApp);
        if (app === null) {
            throw new schematics_1.SchematicsException('Universal/server app not found.');
        }
        const modulePath = getServerModulePath(host, app);
        if (modulePath === null) {
            throw new schematics_1.SchematicsException('Universal/server app not found.');
        }
        let moduleSource = getSourceFile(host, modulePath);
        if (!ast_utils_1.isImported(moduleSource, 'Routes', '@angular/router')) {
            const recorder = host.beginUpdate(modulePath);
            const routesChange = route_utils_1.insertImport(moduleSource, modulePath, 'Routes', '@angular/router');
            if (routesChange.toAdd) {
                recorder.insertLeft(routesChange.pos, routesChange.toAdd);
            }
            const imports = ast_utils_1.getSourceNodes(moduleSource)
                .filter(node => node.kind === ts.SyntaxKind.ImportDeclaration)
                .sort((a, b) => a.getStart() - b.getStart());
            const insertPosition = imports[imports.length - 1].getEnd();
            const routeText = `\n\nconst routes: Routes = [ { path: '${options.route}', component: AppShellComponent }];`;
            recorder.insertRight(insertPosition, routeText);
            host.commitUpdate(recorder);
        }
        moduleSource = getSourceFile(host, modulePath);
        if (!ast_utils_1.isImported(moduleSource, 'RouterModule', '@angular/router')) {
            const recorder = host.beginUpdate(modulePath);
            const routerModuleChange = route_utils_1.insertImport(moduleSource, modulePath, 'RouterModule', '@angular/router');
            if (routerModuleChange.toAdd) {
                recorder.insertLeft(routerModuleChange.pos, routerModuleChange.toAdd);
            }
            const metadataChange = ast_utils_1.addSymbolToNgModuleMetadata(moduleSource, modulePath, 'imports', 'RouterModule.forRoot(routes)');
            if (metadataChange) {
                metadataChange.forEach((change) => {
                    recorder.insertRight(change.pos, change.toAdd);
                });
            }
            host.commitUpdate(recorder);
        }
        return host;
    };
}
function addShellComponent(options) {
    return (host, context) => {
        const componentOptions = {
            name: 'app-shell',
            module: options.rootModuleFileName,
        };
        return schematics_1.schematic('component', componentOptions)(host, context);
    };
}
function default_1(options) {
    return schematics_1.chain([
        addUniversalApp(options),
        addAppShellConfig(options),
        addRouterModule(options),
        addRouterOutlet(options),
        addServerRoutes(options),
        addShellComponent(options),
    ]);
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,